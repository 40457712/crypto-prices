{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\billy\\\\React\\\\crypto-prices\\\\src\\\\components\\\\Barchart.js\";\nimport React from 'react';\n\n//import classes from './Movie.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Barchart = props => {\n  const Chart = ({\n    children,\n    width,\n    height\n  }) => /*#__PURE__*/_jsxDEV(\"svg\", {\n    viewBox: `0 0 ${width} ${height}`,\n    width: width,\n    height: height,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n  const Bar = ({\n    x,\n    y,\n    width,\n    height\n  }) => /*#__PURE__*/_jsxDEV(\"rect\", {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n  const BarChart = ({\n    data\n  }) => {\n    // Width of each bar\n    const itemWidth = 20;\n\n    // Distance between each bar\n    const itemMargin = 5;\n    const dataLength = data.length;\n\n    // Normalize data, we'll reduce all sizes to 25% of their original value\n    const massagedData = data.map(datum => Object.assign({}, datum, {\n      repos: datum.repos * 0.25\n    }));\n    const mostRepos = massagedData.reduce((acc, cur) => {\n      const {\n        repos\n      } = cur;\n      return repos > acc ? repos : acc;\n    }, 0);\n    const chartHeight = mostRepos;\n    return /*#__PURE__*/_jsxDEV(Chart, {\n      width: dataLength * (itemWidth + itemMargin),\n      height: chartHeight,\n      children: massagedData.map((datum, index) => /*#__PURE__*/_jsxDEV(Bar, {\n        x: index * (itemWidth + itemMargin),\n        y: 0,\n        width: itemWidth,\n        height: datum.repos\n      }, datum.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this);\n  };\n};\n_c = Barchart;\nexport default Barchart;\nvar _c;\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Barchart","props","Chart","children","width","height","viewBox","fileName","_jsxFileName","lineNumber","columnNumber","Bar","x","y","BarChart","data","itemWidth","itemMargin","dataLength","length","massagedData","map","datum","Object","assign","repos","mostRepos","reduce","acc","cur","chartHeight","index","name","_c","$RefreshReg$"],"sources":["C:/Users/billy/React/crypto-prices/src/components/Barchart.js"],"sourcesContent":["import React from 'react';\r\n\r\n//import classes from './Movie.module.css';\r\n\r\nconst Barchart = (props) => {\r\n\r\n    const Chart = ({ children, width, height }) => (\r\n        <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\r\n          {children}\r\n        </svg>\r\n      )\r\n      \r\n      const Bar = ({ x, y, width, height }) => (\r\n        <rect x={x} y={y} width={width} height={height} />\r\n      )\r\n\r\n      const BarChart = ({ data }) => {\r\n        // Width of each bar\r\n        const itemWidth = 20\r\n      \r\n        // Distance between each bar\r\n        const itemMargin = 5\r\n      \r\n        const dataLength = data.length\r\n      \r\n        // Normalize data, we'll reduce all sizes to 25% of their original value\r\n        const massagedData = data.map(datum =>\r\n          Object.assign({}, datum, { repos: datum.repos * 0.25 })\r\n        )\r\n      \r\n        const mostRepos = massagedData.reduce((acc, cur) => {\r\n          const { repos } = cur\r\n          return repos > acc ? repos : acc\r\n        }, 0)\r\n      \r\n        const chartHeight = mostRepos\r\n      \r\n        return (\r\n          <Chart width={dataLength * (itemWidth + itemMargin)} height={chartHeight}>\r\n            {massagedData.map((datum, index) => (\r\n              <Bar\r\n                key={datum.name}\r\n                x={index * (itemWidth + itemMargin)}\r\n                y={0}\r\n                width={itemWidth}\r\n                height={datum.repos}\r\n              />\r\n            ))}\r\n          </Chart>\r\n        )\r\n      }\r\n};\r\n\r\nexport default Barchart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAExB,MAAMC,KAAK,GAAGA,CAAC;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAO,CAAC,kBACtCN,OAAA;IAAKO,OAAO,EAAG,OAAMF,KAAM,IAAGC,MAAO,EAAE;IAACD,KAAK,EAAEA,KAAM;IAACC,MAAM,EAAEA,MAAO;IAAAF,QAAA,EAClEA;EAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CACN;EAED,MAAMC,GAAG,GAAGA,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAET,KAAK;IAAEC;EAAO,CAAC,kBAClCN,OAAA;IAAMa,CAAC,EAAEA,CAAE;IAACC,CAAC,EAAEA,CAAE;IAACT,KAAK,EAAEA,KAAM;IAACC,MAAM,EAAEA;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAClD;EAED,MAAMI,QAAQ,GAAGA,CAAC;IAAEC;EAAK,CAAC,KAAK;IAC7B;IACA,MAAMC,SAAS,GAAG,EAAE;;IAEpB;IACA,MAAMC,UAAU,GAAG,CAAC;IAEpB,MAAMC,UAAU,GAAGH,IAAI,CAACI,MAAM;;IAE9B;IACA,MAAMC,YAAY,GAAGL,IAAI,CAACM,GAAG,CAACC,KAAK,IACjCC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,KAAK,EAAE;MAAEG,KAAK,EAAEH,KAAK,CAACG,KAAK,GAAG;IAAK,CAAC,CACxD,CAAC;IAED,MAAMC,SAAS,GAAGN,YAAY,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAClD,MAAM;QAAEJ;MAAM,CAAC,GAAGI,GAAG;MACrB,OAAOJ,KAAK,GAAGG,GAAG,GAAGH,KAAK,GAAGG,GAAG;IAClC,CAAC,EAAE,CAAC,CAAC;IAEL,MAAME,WAAW,GAAGJ,SAAS;IAE7B,oBACE3B,OAAA,CAACG,KAAK;MAACE,KAAK,EAAEc,UAAU,IAAIF,SAAS,GAAGC,UAAU,CAAE;MAACZ,MAAM,EAAEyB,WAAY;MAAA3B,QAAA,EACtEiB,YAAY,CAACC,GAAG,CAAC,CAACC,KAAK,EAAES,KAAK,kBAC7BhC,OAAA,CAACY,GAAG;QAEFC,CAAC,EAAEmB,KAAK,IAAIf,SAAS,GAAGC,UAAU,CAAE;QACpCJ,CAAC,EAAE,CAAE;QACLT,KAAK,EAAEY,SAAU;QACjBX,MAAM,EAAEiB,KAAK,CAACG;MAAM,GAJfH,KAAK,CAACU,IAAI;QAAAzB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAEZ,CAAC;AACP,CAAC;AAACuB,EAAA,GA/CIjC,QAAQ;AAiDd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}