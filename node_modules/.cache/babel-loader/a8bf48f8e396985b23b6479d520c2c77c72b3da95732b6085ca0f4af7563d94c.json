{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\billy\\\\React\\\\crypto-prices\\\\src\\\\components\\\\Barchart.js\";\nimport React from 'react';\n\n//import classes from './Movie.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = ({\n  children,\n  width,\n  height\n}) => /*#__PURE__*/_jsxDEV(\"svg\", {\n  viewBox: `0 0 ${width} ${height}`,\n  width: width,\n  height: height,\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 5\n}, this);\n_c = Chart;\nconst Bar = ({\n  x,\n  y,\n  width,\n  height\n}) => /*#__PURE__*/_jsxDEV(\"rect\", {\n  x: x,\n  y: y,\n  width: width,\n  height: height\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 5\n}, this);\n_c2 = Bar;\nconst Barchart = data => {\n  // Width of each bar\n  const itemWidth = 20;\n\n  // Distance between each bar\n  const itemMargin = 5;\n  const dataLength = data.length;\n\n  // Normalize data, we'll reduce all sizes to 25% of their original value\n  const massagedData = data.map(datum => Object.assign({}, datum, {\n    repos: datum.repos * 0.25\n  }));\n  const mostRepos = massagedData.reduce((acc, cur) => {\n    const {\n      repos\n    } = cur;\n    return repos > acc ? repos : acc;\n  }, 0);\n  const chartHeight = mostRepos;\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    width: dataLength * (itemWidth + itemMargin),\n    height: chartHeight,\n    children: massagedData.map((datum, index) => /*#__PURE__*/_jsxDEV(Bar, {\n      x: index * (itemWidth + itemMargin),\n      y: 0,\n      width: itemWidth,\n      height: datum.repos\n    }, datum.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 11\n  }, this);\n};\n_c3 = Barchart;\nexport default Barchart;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"Bar\");\n$RefreshReg$(_c3, \"Barchart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Chart","children","width","height","viewBox","fileName","_jsxFileName","lineNumber","columnNumber","_c","Bar","x","y","_c2","Barchart","data","itemWidth","itemMargin","dataLength","length","massagedData","map","datum","Object","assign","repos","mostRepos","reduce","acc","cur","chartHeight","index","name","_c3","$RefreshReg$"],"sources":["C:/Users/billy/React/crypto-prices/src/components/Barchart.js"],"sourcesContent":["import React from 'react';\r\n\r\n//import classes from './Movie.module.css';\r\nconst Chart = ({ children, width, height }) => (\r\n    <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\r\n      {children}\r\n    </svg>\r\n  )\r\n  \r\n  const Bar = ({ x, y, width, height }) => (\r\n    <rect x={x} y={y} width={width} height={height} />\r\n  )\r\n\r\nconst Barchart = (data) => {\r\n\r\n        // Width of each bar\r\n        const itemWidth = 20\r\n      \r\n        // Distance between each bar\r\n        const itemMargin = 5\r\n      \r\n        const dataLength = data.length\r\n      \r\n        // Normalize data, we'll reduce all sizes to 25% of their original value\r\n        const massagedData = data.map(datum =>\r\n          Object.assign({}, datum, { repos: datum.repos * 0.25 })\r\n        )\r\n      \r\n        const mostRepos = massagedData.reduce((acc, cur) => {\r\n          const { repos } = cur\r\n          return repos > acc ? repos : acc\r\n        }, 0)\r\n      \r\n        const chartHeight = mostRepos\r\n      \r\n        return (\r\n          <Chart width={dataLength * (itemWidth + itemMargin)} height={chartHeight}>\r\n            {massagedData.map((datum, index) => (\r\n              <Bar\r\n                key={datum.name}\r\n                x={index * (itemWidth + itemMargin)}\r\n                y={0}\r\n                width={itemWidth}\r\n                height={datum.repos}\r\n              />\r\n            ))}\r\n          </Chart>\r\n        )\r\n      };\r\n\r\nexport default Barchart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC;AAAO,CAAC,kBACtCJ,OAAA;EAAKK,OAAO,EAAG,OAAMF,KAAM,IAAGC,MAAO,EAAE;EAACD,KAAK,EAAEA,KAAM;EAACC,MAAM,EAAEA,MAAO;EAAAF,QAAA,EAClEA;AAAQ;EAAAI,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACN,CACN;AAAAC,EAAA,GAJGT,KAAK;AAMT,MAAMU,GAAG,GAAGA,CAAC;EAAEC,CAAC;EAAEC,CAAC;EAAEV,KAAK;EAAEC;AAAO,CAAC,kBAClCJ,OAAA;EAAMY,CAAC,EAAEA,CAAE;EAACC,CAAC,EAAEA,CAAE;EAACV,KAAK,EAAEA,KAAM;EAACC,MAAM,EAAEA;AAAO;EAAAE,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAClD;AAAAK,GAAA,GAFKH,GAAG;AAIX,MAAMI,QAAQ,GAAIC,IAAI,IAAK;EAEnB;EACA,MAAMC,SAAS,GAAG,EAAE;;EAEpB;EACA,MAAMC,UAAU,GAAG,CAAC;EAEpB,MAAMC,UAAU,GAAGH,IAAI,CAACI,MAAM;;EAE9B;EACA,MAAMC,YAAY,GAAGL,IAAI,CAACM,GAAG,CAACC,KAAK,IACjCC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,KAAK,EAAE;IAAEG,KAAK,EAAEH,KAAK,CAACG,KAAK,GAAG;EAAK,CAAC,CACxD,CAAC;EAED,MAAMC,SAAS,GAAGN,YAAY,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IAClD,MAAM;MAAEJ;IAAM,CAAC,GAAGI,GAAG;IACrB,OAAOJ,KAAK,GAAGG,GAAG,GAAGH,KAAK,GAAGG,GAAG;EAClC,CAAC,EAAE,CAAC,CAAC;EAEL,MAAME,WAAW,GAAGJ,SAAS;EAE7B,oBACE3B,OAAA,CAACC,KAAK;IAACE,KAAK,EAAEgB,UAAU,IAAIF,SAAS,GAAGC,UAAU,CAAE;IAACd,MAAM,EAAE2B,WAAY;IAAA7B,QAAA,EACtEmB,YAAY,CAACC,GAAG,CAAC,CAACC,KAAK,EAAES,KAAK,kBAC7BhC,OAAA,CAACW,GAAG;MAEFC,CAAC,EAAEoB,KAAK,IAAIf,SAAS,GAAGC,UAAU,CAAE;MACpCL,CAAC,EAAE,CAAE;MACLV,KAAK,EAAEc,SAAU;MACjBb,MAAM,EAAEmB,KAAK,CAACG;IAAM,GAJfH,KAAK,CAACU,IAAI;MAAA3B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKhB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEZ,CAAC;AAACyB,GAAA,GAnCFnB,QAAQ;AAqCd,eAAeA,QAAQ;AAAC,IAAAL,EAAA,EAAAI,GAAA,EAAAoB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAArB,GAAA;AAAAqB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}